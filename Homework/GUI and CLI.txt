
       
       GUI and CLI
       Karson McGrath
       
       
       GUI and CLI are two very important factors when it comes to coding. GUI stands for graphical user interfaces and CLI stands for command line interfaces. While both playing their parts when coding, they both have their major differences. These differences can come straight to the point from their names, where GUI deals with the graphics such as icons. To combat this, CLI deals with text inputs. While both being very different, they can help developers reach their desired coding product.
In coding the much preferred way to have on your interface is the GUI. This because compared to CLI, the GUI is much easier to navigate. GUI relies on visuals to help new users gather information. This can as easy copy and pasting on your laptop. Compared to CLI, the graphical user interface is a lot faster and more accessible to users and can be found very easily. Users can find GUI’s in devices such as computer monitors or smartphones. GUI’s are the easier way to learn about interfaces, but that doesn’t mean that command line interfaces go unnoticed.
For more experiences coders, CLI is another type of interface that is a lot more challenging than the easy to use GUI. CLI is different that GUA because the command line interface relies on the user to put in text prompts to the make the interface work. Compared to GUI, where everything is pretty much ready for the user to play around with, CLI has to come from scratch. The user has to type out everything they want the interface to do and also make sure it works as well. But, if the user gets experienced enough, CLI can actually be a lot faster to use than GUI. CLI can have some drawbacks as it is extremely difficult to use at first and can have bugs created with that newness to the program. But if the user can become experienced enough, they might not even need the aid of GUI.
While both interfaces have their differences, each one is needed to better your experience as a coder. The GUI can play its part in helping users learn the surface level ways on how an interface should be used. This can help users become familiar with what interfaces should look like and how they should act. Then, CLI can come into play and allow users to really grasp on the idea of making their own interfaces. CLI allows for a lot of creative liberty as while in CLI, there are a lot of possibilities the user can explore. The only way to reach this stepping stone is have both interfaces working together in heling coders reach a point in where they can create interfaces that work. 

